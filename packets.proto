syntax = "proto3";

// C -> S & S -> C

message Message {
  enum MessageType {
    HELLO = 0;
    REGISTERED = 1;
    REJECTED = 2;
    NODE_TREE = 3;
    NODE_UPDATE = 4;
    CLIPBOARD_UPDATE = 5;
    PING = 6;
    PONG = 7;
    HANGING_UP = 8;
  }

  MessageType type = 1;

  oneof value {
    Hello hello = 2;
    Registered registered = 3;
    Rejected rejected = 4;
    NodeTree node_tree = 5;
    NodeUpdate node_update = 6;
    ClipboardUpdate clipboard_update = 7;
    Ping ping = 8;
    Pong pong = 9;
    HangingUp hanging_up = 10;
  }
}

/*
* A ClipboardUpdate message is sent from both clients and servers.
*
* When sent from a server, this message indicates that the client should update its clipboard to
* contain the contents.
*
* When sent from a client, this message indiciates that the server should tell other clients to
* update their clipboards to contain the contents.
*
* The contents may be compressed. If the compressed field is true, the contents are compressed using
* the Snappy frame format and must be decompressed before being stored on the clipboard.
*/
message ClipboardUpdate {
  bytes contents = 1; // the contents of the clipboard
  bool compressed = 2; // whether the contents are compressed
}

// C -> S

/*
* A Hello message is sent when the client turns on and attempts to connect to the server.
*
* The server will send back either a Registered message or a Rejected message in response.
*/
message Hello {
  uint32 version = 1; // the client's version
  string name = 2; // the client's name
}

/*
* A Ping message is sent by the client on a regular interval to alert the server that the client is
* still available.
*
* A Pong message will be sent by the server in response to a valid Ping message.
*/
message Ping {
  uint64 rand = 1; // random ping content
}

// S -> C

/*
* A Registered message is sent when the server receives a Hello message from a client and determines
* the message to be valid.
*/
message Registered {
  uint32 node_id = 1; // client's node id
  uint32 num_nodes = 2; // number of nodes in the tree
  NodeTree tree = 3; // the node tree, updated with this client to be included
  bytes clipboard = 4; // the current shared clipboard
  uint32 max_message_size = 5; // the maximum size
}

/*
* A Pong message is sent back to the client after receiving a valid Ping message.
*/
message Pong {
  uint64 rand = 1; // random content from the Ping this Pong is responding to
}

/*
* A NodeTree message may be sent as part of the Registered message or on its own.
*
* No matter how it is sent, receiving this message indicates that the client should completely
* replace its node tree with this one.
*/
message NodeTree {
  map<uint32, string> nodes = 1; // each node id mapped to its name
}

/*
* A NodeUpdate message is sent by the server whenever a change occurs to the node tree.
*
* Upon receiving this message, each client should update its node tree in the manner described by
* this message.
*/
message NodeUpdate {
  enum UpdateType {
    ADDED = 0; // the node was added to the tree
    REMOVED = 1; // the node was removed from the tree
  }

  UpdateType type = 1; // the type of update this node had
  uint32 node_id = 2; // the node involved
  string node_name = 3; // set if this is an add
}

/*
* A Rejected message is sent by the server to the client if the server determines the Hello message
* to be invalid.
*
* The client should examine the cause of the rejection and try again.
*/
message Rejected {
  enum RejectionReason {
    BAD_VERSION = 0; // server is not compatible with the client's version
    BAD_NAME = 1; // the client's name is already taken
    BAD_MESSAGE = 2; // the client did not send Hello
  }

  RejectionReason reason = 1; // the reason the client was rejected
}

/*
* A HangingUp message is sent by the server to the client if the server decides to cease
* communications with the client at any point.
*
* It should be assumed by the client that any further communication with the server will be
* impossible on the current connection.
*/
message HangingUp {
  enum HangUpReason {
    MESSAGE_TOO_LARGE = 0;
    INVALID_MESSAGE = 1;
    PING_TIMEOUT = 2;
  }

  HangUpReason reason = 1; // the reason for the hang-up
}
